generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique @db.VarChar(255)
  password         String?           @db.VarChar(255)
  changePasswordAt DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  role             UserRole          @default(User)
  registrationType RegistrationType?
  deactivated      Boolean           @default(false)
  profilePicture   String?           @db.LongText
  canReceiveEmail  Boolean           @default(false)
  tax              Tax?
  listing          Listing[]
  reportListing    ReportListing[]
  paymentMethod    PaymentMethod[]
  wishes           WishGroup[]
  review           Review[]
  personalInfo     PersonalInfo?
  MultiFactorAuth  MultiFactorAuth[]
  Coupons          Coupon[]
  taxId            Int?
  hostInfoId       Int?
  hostInfo         HostInfo?
  Booking          Booking[]
  Transaction      Transaction[]
}

model PersonalInfo {
  id                Int                 @id @default(autoincrement())
  userId            Int                 @unique
  firstName         String              @db.VarChar(255)
  middleName        String?             @db.VarChar(255)
  lastName          String              @db.VarChar(255)
  birthDate         DateTime?
  governmentId      String?             @db.LongText
  phoneNumber       String              @db.VarChar(20)
  country           String              @db.VarChar(100)
  language          String              @db.VarChar(50)
  currency          String              @db.VarChar(10)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  user              User                @relation(fields: [userId], references: [id])
  address           Addresses?
  emergencyContacts EmergencyContacts[]
  confirm           String              @db.VarChar(250)

  @@index([userId])
}

model HostInfo {
  id          Int      @id @default(autoincrement())
  userId      Int?     @unique
  user        User?    @relation(fields: [userId], references: [id])
  work        String   @db.VarChar(100)
  hostedSince DateTime @default(now())

  @@index([userId])
}

model EmergencyContacts {
  id            Int          @id @default(autoincrement())
  peronalInfoId Int
  name          String       @db.LongText
  relationship  String       @db.VarChar(100)
  email         String?      @db.VarChar(50)
  phoneNumber   String?      @db.VarChar(20)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  personalInfo  PersonalInfo @relation(fields: [peronalInfoId], references: [id])

  @@index([peronalInfoId])
}

model Addresses {
  id            Int          @id @default(autoincrement())
  peronalInfoId Int          @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  city          String?      @db.LongText
  stateProvince String?      @db.LongText
  streetAddress String?      @db.LongText
  aptSuite      String?      @db.LongText
  zipCode       Int?
  country       String?      @db.VarChar(255)
  personalInfo  PersonalInfo @relation(fields: [peronalInfoId], references: [id])

  @@index([peronalInfoId])
}

model ForgotPassword {
  id        Int       @id @default(autoincrement())
  email     String    @db.VarChar(255)
  code      String    @db.VarChar(255)
  used      Boolean   @default(false)
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  expiredAt DateTime
}

model MultiFactorAuth {
  id        Int       @id @default(autoincrement())
  userId    Int
  type      String    @db.VarChar(255)
  code      String    @db.VarChar(255)
  used      Boolean   @default(false)
  expiredAt DateTime
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Listing {
  id                   Int                  @id @default(autoincrement())
  hostedById           Int
  images               String               @db.LongText
  title                String               @db.VarChar(100)
  descriptionId        Int?                 @unique
  listingDescription   ListingDescription?  @relation(fields: [descriptionId], references: [id])
  address              String               @db.LongText
  listingPriceId       Int                  @unique
  category             ListingCategory
  favoriteBy           String?
  whereYoullBe         String               @db.LongText()
  whereYoullSleep      String               @db.LongText()
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  deletedAt            DateTime?
  latitude             Decimal?             @db.Decimal(10, 0)
  longitude            Decimal?             @db.Decimal(10, 0)
  basicAboutPlaceId    Int?                 @unique
  hostedBy             User                 @relation(fields: [hostedById], references: [id])
  basicAboutPlace      BasicAboutPlace?     @relation(fields: [basicAboutPlaceId], references: [id], onDelete: Cascade)
  price                ListingPrice         @relation(fields: [listingPriceId], references: [id])
  highLights           ListingHighLights[]
  placeOffers          ListingPlaceOffers[]
  review               Review[]
  houseRules           HouseRule[]
  safetyProperties     SafetyProperty[]
  cancellationPolicies CancellationPolicy[]
  reports              ReportListing[]
  wishes               WishGroup[]
  Booking              Booking[]

  @@index([basicAboutPlaceId])
  @@index([listingPriceId])
  @@index([hostedById])
  @@index([descriptionId])
}

model ListingDescription {
  id                 Int       @id @default(autoincrement())
  listingId          Int?      @unique
  listing            Listing?
  generalDescription String    @db.LongText()
  aboutSpace         String?   @db.LongText()
  aboutGuestAccess   String?   @db.LongText()
  otherThingsNote    String?   @db.LongText()
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?

  @@index([listingId])
}

model BasicAboutPlace {
  id        Int       @id @default(autoincrement())
  guests    Int
  bedRooms  Int
  beds      Int
  bathRooms Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Listing   Listing?
}

model PaymentMethod {
  id        Int       @id @default(autoincrement())
  userId    Int
  cardInfo  String    @db.LongText
  cardType  String    @db.VarChar(255)
  lastFour  String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDefault Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  Booking   Booking[]

  @@index([userId])
}

model ReportListing {
  id         Int       @id @default(autoincrement())
  reports    String    @db.LongText()
  reportedBy Int
  user       User      @relation(fields: [reportedBy], references: [id])
  listingId  Int
  listing    Listing   @relation(fields: [listingId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  @@index([reportedBy])
  @@index([listingId])
}

model Coupon {
  id             Int       @id @default(autoincrement())
  createdBy      Int?
  usedBy         Int?
  code           String    @unique
  expirationDate DateTime
  reward         String
  isUsed         Boolean
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  user           User?     @relation(fields: [usedBy], references: [id])

  @@index([usedBy])
}

model ListingPrice {
  id          Int       @id @unique @default(autoincrement())
  fee         Int
  serviceFee  Int
  cleaningFee Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  listing     Listing?
}

model HighLights {
  id        Int                 @id @default(autoincrement())
  title     String
  details   String
  icon      String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  deletedAt DateTime?
  listings  ListingHighLights[]
}

model ListingHighLights {
  id           Int        @id @default(autoincrement())
  listingId    Int
  highLightsId Int
  createdAt    DateTime   @default(now())
  deletedAt    DateTime?
  updatedAt    DateTime   @updatedAt
  listing      Listing    @relation(fields: [listingId], references: [id])
  highlights   HighLights @relation(fields: [highLightsId], references: [id])

  @@unique([listingId, highLightsId])
  @@index([listingId])
  @@index([highLightsId])
}

model PlaceOffers {
  id                 Int                  @id @default(autoincrement())
  icon               String
  title              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  category           String
  listingPlaceOffers ListingPlaceOffers[]
}

model ListingPlaceOffers {
  id           Int         @id @default(autoincrement())
  listingId    Int
  placeOfferId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  listing      Listing     @relation(fields: [listingId], references: [id])
  placeOffer   PlaceOffers @relation(fields: [placeOfferId], references: [id])

  @@unique([listingId, placeOfferId])
  @@index([listingId])
  @@index([placeOfferId])
}

model HouseRule {
  id        Int       @id @default(autoincrement())
  title     String
  listingId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  listing   Listing   @relation(fields: [listingId], references: [id])
  rules     Rule[]

  @@index([listingId])
}

model SafetyProperty {
  id        Int       @id @default(autoincrement())
  title     String
  listingId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  listing   Listing   @relation(fields: [listingId], references: [id])
  rules     Rule[]

  @@index([listingId])
}

model CancellationPolicy {
  id                 Int       @id @default(autoincrement())
  title              String
  cancelationDueDate DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  listingId          Int
  listing            Listing   @relation(fields: [listingId], references: [id])
  rules              Rule[]

  @@index([listingId])
}

model Rule {
  id                   Int                 @id @default(autoincrement())
  icon                 String
  rule                 String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  deletedAt            DateTime?
  cancellationPolicyId Int?
  description          String              @db.LongText()
  houseRuleId          Int?
  safePropertyId       Int?
  safetyProperty       SafetyProperty?     @relation(fields: [safePropertyId], references: [id])
  houseRule            HouseRule?          @relation(fields: [houseRuleId], references: [id])
  cancallationPolicy   CancellationPolicy? @relation(fields: [cancellationPolicyId], references: [id])

  @@index([houseRuleId])
  @@index([cancellationPolicyId])
  @@index([safePropertyId])
}

model WishGroup {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  listingId Int
  note      String?   @db.LongText
  user      User      @relation(fields: [userId], references: [id])
  listing   Listing   @relation(fields: [listingId], references: [id])

  @@index([userId])
  @@index([listingId])
}

model Review {
  id                 Int       @id @default(autoincrement())
  userId             Int
  cleanLinessRates   Int       @db.Int()
  accuracyRates      Int       @db.Int()
  checkInRates       Int       @db.Int()
  communicationRates Int       @db.Int()
  locationRates      Int       @db.Int()
  valueRates         Int       @db.Int()
  comment            String    @db.LongText
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  listingId          Int
  user               User      @relation(fields: [userId], references: [id])
  listing            Listing   @relation(fields: [listingId], references: [id])

  @@index([listingId])
  @@index([userId])
}

model Tax {
  id                 Int       @id @default(autoincrement())
  countryRegion      String    @db.VarChar(255)
  vatId              String    @db.VarChar(255)
  nameOnRegistration String    @db.VarChar(255)
  addressLine1       String    @db.VarChar(255)
  addressLine2       String    @db.VarChar(255)
  city               String    @db.VarChar(255)
  provinceRegion     String    @db.VarChar(255)
  zipPostalCode      String    @db.VarChar(255)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
  User               User?     @relation(fields: [userId], references: [id])
  userId             Int?      @unique
}

model Booking {
  id                       Int            @id @default(autoincrement())
  listingId                Int
  Listing                  Listing?       @relation(fields: [listingId], references: [id])
  transactionId            Int?           @unique
  Transaction              Transaction?   @relation(fields: [transactionId], references: [id])
  userId                   Int
  User                     User?          @relation(fields: [userId], references: [id])
  fromDate                 DateTime
  toDate                   DateTime
  adultCount               Int
  childrenCount            Int
  infantCount              Int
  paymentType              PaymentType
  cardInfo                 String?        @db.LongText
  cardType                 String?        @db.VarChar(255)
  lastFour                 String?        @db.VarChar(255)
  totalFee                Int?
  PaymentMethod            PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId          Int?
  xenditPaymentMethodId    String?        @unique @db.VarChar(255)
  xenditPaymentRequestId   String?        @unique @db.VarChar(255)
  xenditPaymentReferenceId String?        @unique @db.VarChar(255)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  deletedAt                DateTime?

  @@index([listingId])
  @@index([userId])
  @@index([transactionId])
  @@index([paymentMethodId])
}

model Transaction {
  id                     Int               @id @default(autoincrement())
  earnings               Float?            @db.Float
  xenditPaymentRequestId String?           @unique @db.VarChar(255)
  status                 TransactionStatus @default(Pending)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  deletedAt              DateTime?
  User                   User?             @relation(fields: [userId], references: [id])
  userId                 Int?
  Booking                Booking?

  @@index([userId])
}

enum UserRole {
  Admin
  Host
  User
}

enum RegistrationType {
  Manual
  Facebook
  Google
}

enum ListingCategory {
  Accomodation
  Rentals
  Activity
}

enum PaymentType {
  GCASH
  CreditDebit
  SavedCreditDebit
}

enum TransactionStatus {
  Succeed
  Failed
  Pending
  Refunded
}
