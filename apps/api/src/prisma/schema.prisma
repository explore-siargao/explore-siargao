// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id               Int               @id @default(autoincrement())
  registrationType RegistrationType?
  email            String            @unique @db.VarChar(255)
  password         String?           @db.VarChar(255)
  profilePicture   String?           @db.LongText()
  canReceiveEmail  Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  role             UserRole          @default(User)
  listing          Listing[]
  paymentMethod    PaymentMethod[]
  wishes           WishGroup[]
  review           Review[]
  personalInfo     PersonalInfo?
  deactivated      Boolean           @default(false)
  MultiFactorAuth  MultiFactorAuth[]
  Coupons          Coupon[]
}

model PersonalInfo {
  id                Int                 @id @default(autoincrement())
  userId            Int                 @unique
  user              User                @relation(fields: [userId], references: [id])
  firstName         String              @db.VarChar(255)
  middleName        String?             @db.VarChar(255)
  lastName          String              @db.VarChar(255)
  birthDate         DateTime?
  governMentId      String?             @db.VarChar(255)
  address           Addresses?
  emergrncyContacts EmergencyContacts[]
  phoneNumber       String              @db.VarChar(20)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?

  @@index([userId])
}

model EmergencyContacts {
  id            Int          @id @default(autoincrement())
  peronalInfoId Int
  personalInfo  PersonalInfo @relation(fields: [peronalInfoId], references: [id])
  name          String       @db.LongText()
  relationship  String       @db.VarChar(100)
  email         String?      @db.VarChar(50)
  phoneNumber   String?      @db.VarChar(20)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?

  @@index([peronalInfoId])
}

model Addresses {
  id            Int          @id @default(autoincrement())
  peronalInfoId Int          @unique
  personalInfo  PersonalInfo @relation(fields: [peronalInfoId], references: [id])
  streetAddress String?      @db.LongText()
  city          String?      @db.LongText()
  province      String?      @db.LongText()
  zipCode       Int?         @db.Int()
  country       String?      @db.VarChar(255)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?

  @@index([peronalInfoId])
}

model ForgotPassword {
  id        Int       @id @default(autoincrement())
  email     String    @db.VarChar(255)
  code      String    @db.VarChar(255)
  used      Boolean   @default(false)
  expiredAt DateTime
  createdAt DateTime  @default(now())
  deletedAt DateTime?
}

model MultiFactorAuth {
  id        Int       @id @default(autoincrement())
  userId    Int
  type      String    @db.VarChar(255)
  code      String    @db.VarChar(255)
  used      Boolean   @default(false)
  expiredAt DateTime
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Listing {
  id                Int              @id @default(autoincrement())
  hostedById        Int
  hostedBy          User             @relation(fields: [hostedById], references: [id])
  imageUrls         String           @db.LongText()
  title             String           @db.VarChar(100)
  basicAboutPlaceId Int?            @unique
  basicAboutPlace   BasicAboutPlace? @relation(fields: [basicAboutPlaceId], references: [id], onDelete: Cascade)
  description       String           @db.LongText()
  address           String           @db.LongText()
  listingPriceId    Int              @unique
  longitude         Decimal?         @db.Decimal()
  latitude          Decimal?         @db.Decimal()
  price             ListingPrice     @relation(fields: [listingPriceId], references: [id])
  highLights        ListingHighLights[]
  placeOffers       ListingPlaceOffers[]
  thingsToKnow      ThingsToKnow[]
  category          ListingCategory
  review            Review[]
  reports           ReportListing[]
  favoriteBy        String?
  wishes            WishGroup[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?

  @@index([basicAboutPlaceId])
  @@index([listingPriceId])
  @@index([hostedById])
}

model BasicAboutPlace {
  id        Int       @id @default(autoincrement())
  guests    Int       @db.Int()
  bedRooms  Int       @db.Int()
  beds      Int       @db.Int()
  bathRooms Int       @db.Int()
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  Listing   Listing?
}

model PaymentMethod {
  id             Int       @id @default(autoincrement())
  userId         Int
  user           User      @relation(fields: [userId], references: [id])
  cardNumber     String    @unique
  expirationDate String    @db.VarChar(10)
  cvv            Int
  zipCode        Int
  countryRegion  String    @db.VarChar(255)
  isDefault      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@index([userId])
}

model ReportListing {
 id             Int       @id @default(autoincrement())
reason          String    @db.Text()
otherdetails    String    @db.Text()
reportedBy      Int
listingId       Int       
listing         Listing   @relation(fields: [listingId], references: [id])

@@index([listingId])
}

model Coupon {
  id             Int       @id @default(autoincrement())
  createdBy      Int?
  usedBy         Int?
  user           User?     @relation(fields: [usedBy], references: [id])
  code           String    @unique
  expirationDate DateTime
  reward         String
  isUsed         Boolean
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@index([usedBy])
}

model ListingPrice {
  id          Int       @id @unique @default(autoincrement())
  listing     Listing?
  fee         Int
  cleaningFee Int
  serviceFee  Int
  isNight     Boolean?  @default(false)
  checkIn     DateTime
  checkOut    DateTime
  countGuest  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model HighLights {
  id        Int       @id @default(autoincrement())
  title     String
  details   String
  icon      String
  listings  ListingHighLights[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ListingHighLights{
  id Int @id @default(autoincrement())
  listingId Int
  highLightsId Int
  listing Listing @relation(fields: [listingId], references: [id])
  highlights HighLights @relation(fields: [highLightsId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  @@index([listingId])
  @@index([highLightsId])
  @@unique([listingId,highLightsId])
}

model PlaceOffers {
  id        Int       @id @default(autoincrement())
 listingPlaceOffers ListingPlaceOffers[]
  icon      String
  title     String
  category  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ListingPlaceOffers{
  id Int @id @default(autoincrement())
  listingId Int
  placeOfferId Int
  listing Listing @relation(fields: [listingId], references: [id])
  placeOffer PlaceOffers @relation(fields: [placeOfferId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  @@index([listingId])
  @@index([placeOfferId])
  @@unique([listingId,placeOfferId])
}

model ThingsToKnow {
  id             Int                 @id @default(autoincrement())
  listingId      Int
  listing        Listing             @relation(fields: [listingId], references: [id])
  houseRule      HouseRules[]
  safetyProperty SafetyAndProperty[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  deletedAt      DateTime?

  @@index([listingId])
}

model HouseRules {
  id             Int          @id @default(autoincrement())
  thingsToKnowid Int
  thingsToKnow   ThingsToKnow @relation(fields: [thingsToKnowid], references: [id])
  title          String
  rules          Rule[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?

  @@index([thingsToKnowid])
}

model SafetyAndProperty {
  id             Int          @id @default(autoincrement())
  title          String
  thingsToKnowid Int
  thingsToKnow   ThingsToKnow @relation(fields: [thingsToKnowid], references: [id])
  rules          Rule[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?

  @@index([thingsToKnowid])
}

model CancellationPolicy {
  id                 Int       @id @default(autoincrement())
  title              String
  description        String
  cancelationDueDate DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
}

model Rule {
  id                Int               @id @default(autoincrement())
  icon              String
  rule              String
  houseRuleid       Int
  houseRule         HouseRules        @relation(fields: [houseRuleid], references: [id])
  safetyPropertyId  Int
  safetyAndProperty SafetyAndProperty @relation(fields: [safetyPropertyId], references: [id])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?

  @@index([safetyPropertyId])
  @@index([houseRuleid])
}

model WishGroup {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  title     String    @db.VarChar(100)
  note      String?   @db.LongText()
  listingId Int
  listing   Listing   @relation(fields: [listingId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
  @@index([listingId])
}

model Review {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  listingId Int
  listing   Listing   @relation(fields: [listingId], references: [id])
  rates     Float
  comment   String    @db.LongText()
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([listingId])
  @@index([userId])
}

enum UserRole {
  Admin
  Host
  User
}

enum RegistrationType {
  Manual
  Facebook
  Google
}

enum ListingCategory {
  Accomodation
  Rentals
  Activity
}
